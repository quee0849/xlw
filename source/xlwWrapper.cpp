//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "cppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "BlackScholesExplicitFormulas";
};


// registrations start here


namespace
{
XLRegistration::Arg
BSCallArgs[]=
{
{ "Spot","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerBSCall("xlBSCall",
"BSCall",
" Return the price of vanilla call given the spot price ",
LibraryName,
BSCallArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlBSCall(
double Spot)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


double result(
	BSCall(
		Spot)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
BSCallWithParamsArgs[]=
{
{ "parametersMatrix","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerBSCallWithParams("xlBSCallWithParams",
"BSCallWithParams",
" Return the price of vanilla call given spot, strike, r, d, vol, expiry ",
LibraryName,
BSCallWithParamsArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlBSCallWithParams(
LPXLFOPER parametersMatrixa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper parametersMatrixb(
	(parametersMatrixa));
MyMatrix parametersMatrix(
	parametersMatrixb.AsMatrix("parametersMatrix"));

double result(
	BSCallWithParams(
		parametersMatrix)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
BSPutWithParamsArgs[]=
{
{ "parametersMatrix","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerBSPutWithParams("xlBSPutWithParams",
"BSPutWithParams",
" Return the price of vanilla put given spot, strike, r, d, vol, expiry ",
LibraryName,
BSPutWithParamsArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlBSPutWithParams(
LPXLFOPER parametersMatrixa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper parametersMatrixb(
	(parametersMatrixa));
MyMatrix parametersMatrix(
	parametersMatrixb.AsMatrix("parametersMatrix"));

double result(
	BSPutWithParams(
		parametersMatrix)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
BSForwardWithParamsArgs[]=
{
{ "parametersMatrix","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerBSForwardWithParams("xlBSForwardWithParams",
"BSForwardWithParams",
" Return the price of a forward given spot, strike, r, d, vol, expiry ",
LibraryName,
BSForwardWithParamsArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlBSForwardWithParams(
LPXLFOPER parametersMatrixa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper parametersMatrixb(
	(parametersMatrixa));
MyMatrix parametersMatrix(
	parametersMatrixb.AsMatrix("parametersMatrix"));

double result(
	BSForwardWithParams(
		parametersMatrix)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
BSDigitalCallWithParamsArgs[]=
{
{ "parametersMatrix","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerBSDigitalCallWithParams("xlBSDigitalCallWithParams",
"BSDigitalCallWithParams",
" Return the price of a digital call given spot, strike, r, d, vol, expiry ",
LibraryName,
BSDigitalCallWithParamsArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlBSDigitalCallWithParams(
LPXLFOPER parametersMatrixa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper parametersMatrixb(
	(parametersMatrixa));
MyMatrix parametersMatrix(
	parametersMatrixb.AsMatrix("parametersMatrix"));

double result(
	BSDigitalCallWithParams(
		parametersMatrix)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
BSDigitalPutWithParamsArgs[]=
{
{ "parametersMatrix","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerBSDigitalPutWithParams("xlBSDigitalPutWithParams",
"BSDigitalPutWithParams",
" Return the price of a digtial put given spot, strike, r, d, vol, expiry ",
LibraryName,
BSDigitalPutWithParamsArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlBSDigitalPutWithParams(
LPXLFOPER parametersMatrixa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper parametersMatrixb(
	(parametersMatrixa));
MyMatrix parametersMatrix(
	parametersMatrixb.AsMatrix("parametersMatrix"));

double result(
	BSDigitalPutWithParams(
		parametersMatrix)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
BSZeroCouponBondWithParamsArgs[]=
{
{ "parametersMatrix","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerBSZeroCouponBondWithParams("xlBSZeroCouponBondWithParams",
"BSZeroCouponBondWithParams",
" Return the price of a zero coupon bond given spot, strike, r, d, vol, expiry ",
LibraryName,
BSZeroCouponBondWithParamsArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlBSZeroCouponBondWithParams(
LPXLFOPER parametersMatrixa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper parametersMatrixb(
	(parametersMatrixa));
MyMatrix parametersMatrix(
	parametersMatrixb.AsMatrix("parametersMatrix"));

double result(
	BSZeroCouponBondWithParams(
		parametersMatrix)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

