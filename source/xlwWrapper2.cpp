//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "joshiDemoFunctions.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "MonteCarloRoutines";
};


// registrations start here


namespace
{
XLRegistration::Arg
EchoShortArgs[]=
{
{ "x"," number to be echoed ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerEchoShort("xlEchoShort",
"EchoShort",
" echoes a short ",
LibraryName,
EchoShortArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlEchoShort(
LPXLFOPER xa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper xb(
	(xa));
short x(
	xb.AsShort("x"));

short result(
	EchoShort(
		x)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
AddMatrixArgs[]=
{
{ "matrixA","too lazy to comment this one ","XLF_OPER"},
{ "matrixB","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerAddMatrix("xlAddMatrix",
"AddMatrix",
" adds two matrices together after checking they're the same size. ",
LibraryName,
AddMatrixArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlAddMatrix(
LPXLFOPER matrixAa,
LPXLFOPER matrixBa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper matrixAb(
	(matrixAa));
MyMatrix matrixA(
	matrixAb.AsMatrix("matrixA"));

XlfOper matrixBb(
	(matrixBa));
MyMatrix matrixB(
	matrixBb.AsMatrix("matrixB"));

MyMatrix result(
	AddMatrix(
		matrixA,
		matrixB)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
MCVanillaCallArgs[]=
{
{ "parametersMatrix","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerMCVanillaCall("xlMCVanillaCall",
"MCVanillaCall",
" Return the price of vanilla call given spot, strike, r, d, vol, expiry, numPaths ",
LibraryName,
MCVanillaCallArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlMCVanillaCall(
LPXLFOPER parametersMatrixa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper parametersMatrixb(
	(parametersMatrixa));
MyMatrix parametersMatrix(
	parametersMatrixb.AsMatrix("parametersMatrix"));

double result(
	MCVanillaCall(
		parametersMatrix)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
MCVanillaChoiceArgs[]=
{
{ "parametersMatrix","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerMCVanillaChoice("xlMCVanillaChoice",
"MCVanillaChoice",
" Return the price of vanilla call given spot, r, d, vol, expiry, name, numPaths, Strike ",
LibraryName,
MCVanillaChoiceArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlMCVanillaChoice(
LPXLFOPER parametersMatrixa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper parametersMatrixb(
	(parametersMatrixa));
CellMatrix parametersMatrix(
	parametersMatrixb.AsCellMatrix("parametersMatrix"));

double result(
	MCVanillaChoice(
		parametersMatrix)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

